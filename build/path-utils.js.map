{"version":3,"sources":["../lib/path-utils.ts"],"names":[],"mappings":";;;;;AAAA,+BAAgC;AAIhC,0BAAqB;AAQR,QAAA,QAAQ,GAAG,CAAC,KAAa,EAAE,KAAa,EAAW,EAAE;IAGjE,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;IAC1B,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;IAI1B,MAAM,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,eAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC","file":"path-utils.js","sourcesContent":["import { relative } from 'path';\n\n// Export all of node's path functions, so that users of this\n// module need only import this file\nexport * from 'path';\n\n/**\n * Given two paths, check whether the first contains the second\n * @param path1 The potentially containing path\n * @param path2 The potentially contained path\n * @return A boolean indicating whether `path1` contains `path2`\n */\nexport const contains = (path1: string, path2: string): boolean => {\n\n\t// Fist normalise the input, to remove any path weirdness\n\tpath1 = path1.normalize();\n\tpath2 = path2.normalize();\n\n\t// Now test if any part of the relative path contains a .. ,\n\t// which would tell us that path1 is not part of path2\n\treturn !/^\\.\\.$|\\.\\.\\//.test(relative(path1, path2));\n};\n"],"sourceRoot":"lib"}