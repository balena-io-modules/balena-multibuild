{"version":3,"sources":["../lib/resolve.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,gDAAgD;AAIhD,qCAAkD;AAYlD,qBACC,IAAe,EACf,YAAoB,EACpB,UAAkB;IAGlB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM,cAAc,GAAG,CAAC,OAAe,EAAiB,EAAE;QACzD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;QAC1B,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAM,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAChC,IAAI,CAAC,WAA8B,EACnC,UAAU,EACV,YAAY,EACZ,cAAc,CACd,CAAC;IAEF,MAAM,SAAS,GAAG,OAAO,CAAC,mBAAmB,EAAE,CAAC;IAEhD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC;SAC9C,IAAI,CAAC,CAAC,GAA2B,EAAE,EAAE;QACrC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC;IACb,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;QACnB,MAAM,IAAI,+BAAsB,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AAEJ,CAAC;AAlCD,kCAkCC","file":"resolve.js","sourcesContent":["import * as Promise from 'bluebird';\nimport * as Resolve from 'resin-bundle-resolve';\nimport * as Stream from 'stream';\n\nimport { BuildTask } from './build-task';\nimport { ProjectResolutionError } from './errors';\n\n/**\n * Given a BuildTask, resolve the project type to something that\n * the docker daemon can build (or return image pulls unchanged).\n *\n * @param task a BuildTask to resolve\n * @param architecture The architecture to resolve this project for\n * @param deviceType The device type to resolve this project for\n * @returns A promise which resolves to a new BuildTask\n * @throws ProjectResolutionError\n */\nexport function resolveTask(\n\ttask: BuildTask,\n\tarchitecture: string,\n\tdeviceType: string,\n): Promise<BuildTask> {\n\n\tif (task.external) {\n\t\treturn Promise.resolve(task);\n\t}\n\n\tconst dockerfileHook = (content: string): Promise<void> => {\n\t\ttask.dockerfile = content;\n\t\treturn Promise.resolve();\n\t};\n\n\tconst bundle = new Resolve.Bundle(\n\t\ttask.buildStream as Stream.Readable,\n\t\tdeviceType,\n\t\tarchitecture,\n\t\tdockerfileHook,\n\t);\n\n\tconst resolvers = Resolve.getDefaultResolvers();\n\n\treturn Resolve.resolveBundle(bundle, resolvers)\n\t.then((res: Resolve.ResolvedBundle) => {\n\t\ttask.projectType = res.projectType;\n\t\ttask.buildStream = res.tarStream;\n\t\treturn task;\n\t})\n\t.catch((e: Error) => {\n\t\tthrow new ProjectResolutionError(e);\n\t});\n\n}\n"],"sourceRoot":"lib"}