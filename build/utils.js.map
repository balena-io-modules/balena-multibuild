{"version":3,"sources":["../lib/utils.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,4BAA4B;AAE5B,kCAAkC;AAgBlC,qBAA4B,MAAgB;IAC3C,MAAM,CAAC,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC5C,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QAC1B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;AACJ,CAAC;AAND,kCAMC;AASD,4BAAmC,WAAwB;IAC1D,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,EAAE;QAC9C,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC;gBACN,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,OAAO,CAAC,KAAK;gBACxB,WAAW,EAAE,OAAO,CAAC,IAAI;aACzB,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;gBACd,QAAQ,EAAE,KAAK;gBACf,WAAW,EAAE,OAAO,CAAC,IAAI;gBACzB,WAAW,EAAE,GAAG,CAAC,IAAI,EAAE;aACvB,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QACnB,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC;AAhBD,gDAgBC","file":"utils.js","sourcesContent":["import * as Promise from 'bluebird';\nimport * as _ from 'lodash';\nimport { Readable } from 'stream';\nimport * as tar from 'tar-stream';\n\nimport { BuildTask } from './build-task';\nimport { Composition } from './types';\n\n/**\n * In the tar-stream implementation, there are bugs which can cause it\n * to freeze if some of the entries are not drained, which can happen\n * when splitting the tar stream into it's constiuent streams.\n *\n * This function will drain a stream and drop the output, returning\n * a promise which resolves when the stream is drained.\n *\n * @param stream A readable stream to be drained\n * @return A promise which resolves when the stream is drained\n */\nexport function drainStream(stream: Readable): Promise<void> {\n\treturn new Promise<void>((resolve, reject) => {\n\t\tstream.on('data', _.noop);\n\t\tstream.on('error', reject);\n\t\tstream.on('end', resolve);\n\t});\n}\n\n/**\n * Given a composition, generate the set of build tasks which this module\n * will proceed to build.\n *\n * @param composition The composition from resin-compose-parse\n * @returns An array of tasks which make up this multicontainer build\n */\nexport function generateBuildTasks(composition: Composition): BuildTask[] {\n\treturn _.map(composition.services, (service) => {\n\t\tif (_.isString(service.build)) {\n\t\t\treturn {\n\t\t\t\texternal: true,\n\t\t\t\timageName: service.build,\n\t\t\t\tserviceName: service.name,\n\t\t\t};\n\t\t} else {\n\t\t\treturn _.merge({\n\t\t\t\texternal: false,\n\t\t\t\tserviceName: service.name,\n\t\t\t\tbuildStream: tar.pack(),\n\t\t\t}, service.build);\n\t\t}\n\t});\n}\n"],"sourceRoot":"lib"}