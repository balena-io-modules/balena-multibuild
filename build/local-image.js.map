{"version":3,"sources":["../lib/local-image.ts"],"names":[],"mappings":";;AAEA,qCAA6C;AAQ7C;IA+BC,YACC,MAAiB,EACjB,IAAY,EACZ,QAAiB,EACjB,UAAmB;QAEnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC9B,CAAC;IAKM,QAAQ;QACd,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAOM,WAAW;QACjB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;aACpB,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;YACZ,MAAM,IAAI,0BAAiB,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACJ,CAAC;CACD;AA9DD,gCA8DC","file":"local-image.js","sourcesContent":["import * as Dockerode from 'dockerode';\n\nimport { ImageRemovalError } from './errors';\n\n/**\n * LocalImage\n *\n * This class represents an image on a docker daemon. It also provides\n * methods to act on this image.\n */\nexport class LocalImage {\n\t/**\n\t * The dockerfile which was used to build this image, if one exists\n\t */\n\tpublic dockerfile?: string;\n\n\t/**\n\t * Was this image built locally or imported into the docker daemon\n\t * from a registry?\n\t */\n\tpublic external: boolean;\n\n\t/**\n\t * The reference of this image on the docker daemon\n\t */\n\tpublic name: string;\n\n\t/**\n\t * The daemon which this image is stored on\n\t */\n\tpublic daemon: Dockerode;\n\n\t/**\n\t * Was this image built successfully?\n\t *\n\t * Note that in the case of an image not being successfully built,\n\t * this class could represent an image which is made up of all\n\t * the layers that were successfully built\n\t */\n\tpublic successful: boolean;\n\n\tpublic constructor(\n\t\tdaemon: Dockerode,\n\t\tname: string,\n\t\texternal: boolean,\n\t\tsuccessful: boolean,\n\t) {\n\t\tthis.daemon = daemon;\n\t\tthis.name = name;\n\t\tthis.external = external;\n\t\tthis.successful = successful;\n\t}\n\n\t/**\n\t * Get a handle to the dockerode image\n\t */\n\tpublic getImage(): Dockerode.Image {\n\t\treturn this.daemon.getImage(this.name);\n\t}\n\n\t/**\n\t * Delete an image from the docker daemon\n\t *\n\t * @throws ImageRemovalError\n\t */\n\tpublic deleteImage(): Promise<void> {\n\t\tconst image = this.getImage();\n\t\treturn image.remove()\n\t\t.catch((e) => {\n\t\t\tthrow new ImageRemovalError(e);\n\t\t});\n\t}\n}\n"],"sourceRoot":"lib"}